var searchIndex = {};
searchIndex["sabiwm"] = {"doc":"# SabiWM - éŒ†WM (Rust WM)","items":[[5,"run","sabiwm","Run the actual window manager",null,{"inputs":[],"output":{"name":"result"}}],[5,"initialize_logger","","Initialize the logger",null,{"inputs":[],"output":{"name":"result"}}],[0,"backend","","The backend module contains everything\nrelated to windowing operations, e.g.\ntalk to Xlib, xcb or Wayland.",null,null],[3,"Xcb","sabiwm::backend","",null,null],[4,"Event","","A cross-section of all events that can be generated/handled\nby xlib, xcb and wayland.",null,null],[13,"BackendChanged","","Something on the backend changed, for example\nscreen got resized or xrandr layout got changed.",0,null],[13,"WindowCreated","","A new window has been created",0,null],[13,"WindowClosed","","A window has been closed/killed",0,null],[13,"WindowHid","","A window has been hid, but is still around",0,null],[13,"WindowRevealed","","A windowhas been revealed from hidden status",0,null],[13,"WindowChangeRequest","","A window/app is requesting a change in size",0,null],[13,"MouseEnter","","The mouse pointer has entered a window&#39;s\nframe",0,null],[13,"MouseLeave","","The mouse pointer has left a window&#39;s frame",0,null],[13,"ButtonPressed","","A button has been pressed",0,null],[13,"ButtonReleased","","A button has been released",0,null],[13,"KeyPressed","","A key has been pressed",0,null],[13,"Unknown","","An unknown or not important event",0,null],[11,"clone","","",0,null],[11,"fmt","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"new","","",1,{"inputs":[],"output":{"name":"result"}}],[11,"is_dock","","",1,null],[11,"is_window","","",1,null],[11,"screens","","",1,null],[11,"number_of_screens","","",1,null],[11,"window_name","","",1,null],[11,"class_name","","",1,null],[11,"windows","","",1,null],[11,"resize_window","","",1,null],[11,"move_window","","",1,null],[11,"show_window","","",1,null],[11,"hide_window","","",1,null],[11,"focus_window","","",1,null],[11,"event","","",1,null],[8,"Backend","","A general trait for all backends (X11, XCB, Wayland)",null,null],[16,"Window","","",2,null],[10,"new","","Create a new instance of the Backend.",2,{"inputs":[],"output":{"name":"result"}}],[10,"is_dock","","Determines if the window represented by the given ID\nis a dock and should be ignored for layouts, etc.",2,null],[10,"is_window","","",2,null],[10,"screens","","Returns a vector of all screens currently handled by the\nwindow manager.",2,null],[10,"number_of_screens","","Returns the number of screens. Basically just a shorthand for\n```\nself.screens.len()\n```",2,null],[10,"window_name","","Returns the name/title of the given [`Window`]",2,null],[10,"class_name","","Returns the given [`Window`]s class name.\nUseful for custom mappings, e.g. always move `mpv` to\nworkspace 4.",2,null],[10,"windows","","Returns a vector of all [`Window`] IDs currently handled\nby the window manager&#39;s backend.",2,null],[10,"resize_window","","Tells the backend to resize the given [`Window`] to the\ngiven `width` and `height`.",2,null],[10,"move_window","","Tells the backend to move the [`Window`] to the given location",2,null],[10,"show_window","","Shows/reveals the window if it has previously been hidden\nand notifies it about the event.",2,null],[10,"hide_window","","Hides the window if it has previously been shown\nand notifies it about the event.",2,null],[10,"focus_window","","Focusses the window, so it is ready to accept direct input",2,null],[10,"event","","Blocks until an event can be provided by the backend.\nDoes not need to be asynchronous, because as long\nas there is no event, the window manager does not need\nto do anything.",2,null],[0,"core","sabiwm","The core module contains all common data structures\nused throughout the system to manage the window manager&#39;s\ninternal state. Basically, everything that is independent\nof configs or the actual windowing itself.",null,null],[3,"Rectangle","sabiwm::core","A simple rectangle. Not much to talk about.",null,null],[3,"Stack","","Handles focus tracking on a workspace.\n`focus` keeps track of the focused window&#39;s id\nand `up` and `down` are the windows above or\nbelow the focus stack respectively.",null,null],[12,"focus","","",3,null],[12,"up","","",3,null],[12,"down","","",3,null],[3,"Workspace","","Represents a single workspace with a `tag` (name),\n`id`, a `layout` and a `stack` for all windows.\nA workspace is in charge of all windows belonging\nto that workspace. At each time, a single screen\nholds one workspace, while all the other\nworkspaces are hidden in the background, while\nstill being managed.",null,null],[12,"id","","",4,null],[12,"tag","","",4,null],[12,"stack","","",4,null],[11,"clone","","",5,null],[11,"fmt","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"new","","Creates a new rectangle from the given coordinates (upper left corner + size)",5,{"inputs":[{"name":"i32"},{"name":"i32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"rectangle"}}],[11,"is_inside","","Checks if the given coordinates are within the rectangle",5,null],[11,"overlaps","","",5,null],[11,"clone","","",3,null],[11,"fmt","","",3,null],[11,"eq","","",3,null],[11,"ne","","",3,null],[11,"new","","Create a new stack with the given values",3,{"inputs":[{"name":"t"},{"name":"s"},{"name":"s"}],"output":{"name":"stack"}}],[11,"add","","Add a new element to the stack\nand automatically focus it.",3,null],[11,"integrate","","Flatten the stack into a new container",3,null],[11,"filter","","Filter the stack to retain only windows\nthat yield true in the given filter function.",3,null],[11,"focus_up","","Move the focus to the next element in the `up` list",3,null],[11,"focus_down","","Move the focus down",3,null],[11,"swap_up","","",3,null],[11,"swap_down","","",3,null],[11,"swap_master","","",3,null],[11,"reverse","","Reverse the stack by exchanging\nthe `up` and `down` lists",3,null],[11,"len","","Return the number of elements tracked by the stack",3,null],[11,"is_empty","","Checks if the [`Stack`] is empty",3,null],[11,"contains","","Checks if the given window is tracked by the stack",3,null],[11,"from","","Create a new stack with only the given element\nas the focused one and initialize the rest to empty.",3,{"inputs":[{"name":"t"}],"output":{"name":"stack"}}],[11,"clone","","",4,null],[11,"new","","Create a new workspace",4,{"inputs":[{"name":"u32"},{"name":"s"},{"name":"option"}],"output":{"name":"workspace"}}],[11,"add","","Add a new window to the workspace by adding it to the stack.\nIf the stack doesn&#39;t exist yet, create one.",4,null],[11,"remove","","",4,null],[11,"len","","Returns the number of windows contained in this workspace",4,null],[11,"is_empty","","",4,null],[11,"contains","","Checks if the workspace contains the given window",4,null],[11,"windows","","",4,null],[11,"peek","","",4,null],[11,"map","","",4,null],[11,"map_option","","",4,null],[11,"map_or","","",4,null]],"paths":[[4,"Event"],[3,"Xcb"],[8,"Backend"],[3,"Stack"],[3,"Workspace"],[3,"Rectangle"]]};
initSearch(searchIndex);
